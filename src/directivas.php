<?php
namespace gamboamartin\template_1;
use config\generales;
use gamboamartin\errores\errores;
use stdClass;

class directivas extends \gamboamartin\template\directivas {


    /**
     * Funcion que genera boton valida
     * @param int $registro_id Registro identificador
     * @param string $valida_persona_fisica Verifica bool si activo
     * @return array|string
     */
    final public function button_href_valida_persona_fisica(int $registro_id, string $valida_persona_fisica): array|string
    {

        $session_id = (new generales())->session_id;

        if($session_id === ''){
            return $this->error->error(mensaje: 'Error la $session_id esta vacia', data: $session_id, es_final: true);
        }

        $style = 'danger';
        if($valida_persona_fisica === 'activo'){
            $style = 'info';
        }

        $html = $this->button_href(accion: 'valida_persona_fisica',etiqueta: $valida_persona_fisica
            ,name: 'valida_persona_fisica', place_holder: 'Valida persona fisica',registro_id: $registro_id,
            seccion: 'cat_sat_tipo_persona', style: $style);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al generar label', data: $html);
        }
        return $html;
    }

    /**
     * Genera un input de tip email requerido
     * @param bool $disabled
     * @param string $name Name del input
     * @param string $place_holder Muestra el contenido en el input
     * @param stdClass $row_upd Registro en proceso
     * @param bool $value_vacio Si valor vacio el value lo deja vacio
     * @return array|string
     * @version 8.14.0
     *
     */
    final public function email_required(bool $disabled, string $name, string $place_holder, stdClass $row_upd, bool $value_vacio): array|string
    {
        $valida = $this->valida_data_label(name: $name,place_holder:  $place_holder);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar datos ', data: $valida);
        }
        $email = parent::email_required(disabled: $disabled,name:  $name,place_holder:  $place_holder,
            row_upd: $row_upd, value_vacio: $value_vacio); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al general email ', data: $email);
        }
        return $email;

    }


    /**
     * Genera un input de tipo telefono como requerido
     * @param bool $disable
     * @param string $name
     * @param string $place_holder
     * @param stdClass $row_upd
     * @param bool $value_vacio
     * @return array|string
     */
    public function telefono_required(bool $disable, string $name, string $place_holder, stdClass $row_upd,
                                   bool $value_vacio ): array|string
    {

        $valida = $this->valida_data_label(name: $name,place_holder:  $place_holder);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar datos ', data: $valida);
        }


        $init = $this->init_text(name: $name,place_holder:  $place_holder, row_upd: $row_upd,value_vacio:  $value_vacio);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al inicializar datos', data: $init);
        }

        $html= $this->html->text(disabled:$disable, id_css: $name, name: $name, place_holder: $place_holder,
            required: true, value: $init->row_upd->$name);

        $div = $this->html->div_label(html:  $html,label:$init->label);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al integrar div', data: $div);
        }



        return $div;

    }


}
